knitr::opts_chunk$set(echo = TRUE)
#clear environment
rm(list = ls())
# #Install packages - only one time ever, not every time you run code
# install.packages('sf')
# install.packages('dplyr')
# install.pacakges('ggplot2')
#load packages
library(sf) #spatial analysis
library(dplyr) #tidy data manipulation
library(ggplot2) #tidy figures
#######################################################################
# Census tracts
#######################################################################
url <-'https://opendata.arcgis.com/api/v3/datasets/20332a074f0446b3b3190ba9d68b863e_0/downloads/data?format=shp&spatialRefId=4326'
#download zipfile and unzip
temp = tempfile()
temp2 = tempfile()
download.file(url, temp, mode='wb')
unzip(zipfile=temp, exdir=temp2)
# Read the shapefiles
sf.census <- read_sf(temp2)
#Clean up a little for clarity
sf.census <- sf.census%>%
rename('Tract_ID' = 'GEOGRAPHY_',
'Count_total' = 'COUNT_ALL_',
'Count_white' = 'COUNT_WHIT',
'Count_black' = 'COUNT_BLAC',
'Count_asian' = 'COUNT_ASIA',
'Area' = 'Shape__Are')%>% #rename variables
select(Tract_ID, Count_total, Count_white, Count_black, Count_asian, Area, geometry)%>%
mutate("PopnDensity" = Count_total/Area)
#######################################################################
#litter index
#######################################################################
#specify url to data download
url <- "https://opendata.arcgis.com/datasets/04fa63e09b284dbfbde1983eab367319_0.zip" #Litter index
#download zipfile and unzip
temp = tempfile()
temp2 = tempfile()
download.file(url, temp, mode='wb')
unzip(zipfile=temp, exdir=temp2)
# Read the shapefiles
sf.litter <- read_sf(temp2)
#Clean up a little for clarity
sf.litter <- sf.litter%>%
rename('Street_ID' = 'SEG_ID',
'LitterScore' = 'HUNDRED_BL',
'LitterScoreColor' = 'SCORE_COLO')%>% #rename variables
select(Street_ID, LitterScore, LitterScoreColor, geometry)%>%
unique()
#######################################################################
#trashcan locations
#######################################################################
url <- "https://data.phila.gov/carto/api/v2/sql?q=SELECT+*,+ST_Y(the_geom)+AS+lat,+ST_X(the_geom)+AS+lng+FROM+wastebaskets_big_belly&filename=wastebaskets_big_belly&format=csv&skipfields=cartodb_id"
#read in url
df.cans <- read.csv(url)
#Clean up a little for clarity
df.cans <- df.cans %>%
select(objectid, lat, lng)
head(sf.census)
ggplot() +
theme_void()+
geom_sf(data = sf.census, colour = "black", size=0.1, fill = NA)
ggplot() +
#theme_void()+
geom_sf(data = sf.census, colour = "black", size=0.1, fill = NA)
ggplot() +
theme_void()+
geom_sf(data = sf.census, colour = "black", size=0.1, fill = NA)
ggplot() +
theme_void()+
geom_sf(data = sf.census, colour = "black", size=0.5, fill = NA)
ggplot() +
theme_void()+
geom_sf(data = sf.census, colour = "black", size=0.1, fill = NA)
ggplot() +
theme_void()+
geom_sf(data = sf.census, colour = "black", size=0.9, fill = NA)
ggplot() +
theme_void()+
geom_sf(data = sf.census, colour = "black", size=0.1, fill = NA)
map1 <- ggplot() +
theme_void()+
geom_sf(data = sf.census, aes(fill=Count_total),colour = "black", size=0.1)+
scale_fill_continuous(low = "white", high = "blue4", name= "Population  counts")
map1
head(sf.litter)
ggplot() +
theme_void()+
geom_sf(data = sf.litter, colour = "gray", size=0.1, fill = NA)
#Plot
ggplot() +
theme_void()+
geom_sf(data = sf.litter, aes(color= LitterScoreColor),  size=0.1)
#Create color palette
Pal <- c('GREEN' = 'seagreen4',
'YELLOW' = 'goldenrod3',
'ORANGE' = 'darkorange3',
'RED' = 'red3',
'MAROON' = 'red4',
'GREY' = 'grey')
#plot
ggplot() +
theme_void()+
geom_sf(data = sf.litter, aes(color= LitterScoreColor),  size=0.1)+
scale_color_manual(values = Pal, name= "Litter index")
head(df.cans)
ggplot()+
theme_void()+
geom_point(data=df.cans, (aes(x=lng, y=lat)))
#Extract projection from blocks
crs_PHL <- st_crs(sf.census)
#convert to sf object
sf.cans <- df.cans %>%
st_as_sf(coords =c('lng', 'lat'))%>%
`st_crs<-`(crs_PHL) #set projection
ggplot()+
theme_void()+
geom_sf(data = sf.cans)
View(crs_PHL)
ggplot() +
theme_void()+
geom_sf(data = sf.census, aes(fill=Count_total),colour = "black", size=0.1)+
scale_fill_continuous(low = "white", high = "blue4", name= "Population")+
geom_sf(data = sf.litter, aes(color= LitterScoreColor),  size=0.1)+
scale_color_manual(values = Pal, name= "Litter index")+
geom_sf(data = sf.cans, size=0.5)
#Append a census tract to each trash can
df.cans <- st_join(sf.cans, sf.census, join = st_within) #Find intersections
plyr::count(df.cans$Tract_ID)
View(df.cans)
sf.can
sf.cans
sf.census
plyr::count(df.cans$Tract_ID)
sf.census <- left_join(sf.census,
plyr::count(df.cans$Tract_ID)%>%
rename("Tract_ID" = 'x', "TrashcanNumber"='freq'))%>%
mutate(TrashcanNumber = ifelse(is.na(TrashcanNumber), 0, TrashcanNumber))
sf.census
map2 <- ggplot() +
theme_void()+
geom_sf(data = sf.census, colour = "gray", size=0.1, fill=NA)+
geom_sf(data = sf.cans, size=0.5)+
ggtitle("Points layered over tract polygons")
map3 <- ggplot()+
theme_void()+
geom_sf(data = sf.census, aes(fill=TrashcanNumber), colour = "gray", size=0.1)+
ggtitle("Tract polygons colored by trashcan #")+
scale_fill_continuous(low = "white", high = "seagreen4", name= "Trashcan Number")
map2; map3
sf.litter0 <- sf.litter #save original sf.litter before manipulating
set.seed(123) # set seed to replicate results when using random draws
#randomly simple 10% of data
sf.litter <- sf.litter[sample(c(1:nrow(sf.litter)), round(nrow(sf.litter)/10),
replace = FALSE, prob = NULL),]
#Find intersection of tracts and streets
sf.litter <- st_intersection(sf.litter, sf.census) #computation is long af
#calculate distance of each intersection
sf.litter$dist = as.numeric(st_length(sf.litter)) #take distance of intersection
View(sf.litter)
View(sf.litter0)
sf.litter <- sf.litter %>%
filter(dist != 0) %>% #filter out point intersections (border)
mutate(distscore = dist*LitterScore)%>% #distance * score number
st_drop_geometry() %>% #drop geometry so that you can manipulate normally
group_by(Tract_ID) %>% # for each census tract find sums of distance*score and distance
summarise(TotalScore = sum(distscore),
TotalDist = sum(dist))%>%
mutate(AvgScore = TotalScore/TotalDist, #find average score over total distance
#apply color scheme from before:
ScoreColor="GREY",
ScoreColor=ifelse(AvgScore > 0  & AvgScore <1.75, "GREEN", ScoreColor),
ScoreColor=ifelse(AvgScore>=1.75& AvgScore <2.25, "YELLOW",ScoreColor),
ScoreColor=ifelse(AvgScore>=2.25& AvgScore <2.75, "ORANGE",ScoreColor),
ScoreColor=ifelse(AvgScore>=2.75& AvgScore <3.25, "RED",ScoreColor),
ScoreColor=ifelse(AvgScore>=3.25, "MARROON",ScoreColor))
sf.census = left_join(sf.census, sf.litter) #append these new attributes to census tract data
map4 <-ggplot()+
theme_void()+
geom_sf(data=sf.census, fill=NA, color="black", size=0.1)+
geom_sf(data=sf.litter0, aes(color=LitterScoreColor), alpha=0.3)+
scale_color_manual(values = Pal, name= "Litter index") +
ggtitle("Litter indexed streets plotted over tracts")
map5 <- ggplot()+
theme_void()+
geom_sf(data=sf.census, aes(fill=ScoreColor), alpha=0.8)+
scale_fill_manual(values = Pal, name= "Litter index") +
ggtitle("Tracts colored by mean litter index")
map4;map5
map3; map5
df.census <- sf.census %>%
st_drop_geometry()
summary(lm(TrashcanNumber ~ AvgScore, data=sf.census))
