heat_map <- ggplot () +
theme_void() +
geom_sf(data = sf.heat, aes(fill = HVI_SCORE), colour = "black", size=0.1) +
scale_fill_distiller(type = "seq", palette = "OrRd", direction = 1, name= "Heat Vulnerability Index")
heat_map
View(sf.tree)
heattree_map <- ggplot () +
theme_void() +
geom_sf(data = sf.heat, aes(fill = HVI_SCORE), colour = "black", size=0.1) +
scale_fill_distiller(type = "seq", palette = "OrRd", direction = 1, name= "Heat Vulnerability Index") +
geom_sf(data = sf.tree, size=0.5)
heattree_map
heattree_map <- ggplot () +
theme_void() +
geom_sf(data = sf.heat, aes(fill = HVI_SCORE), colour = "black", size=0.1) +
scale_fill_distiller(type = "seq", palette = "OrRd", direction = 1, name= "Heat Vulnerability Index") +
geom_sf(data = sf.tree, size=0.1)
heattree_map
heattree_map <- ggplot () +
theme_void() +
geom_sf(data = sf.heat, aes(fill = HVI_SCORE), colour = "black", size=0.1) +
scale_fill_distiller(type = "seq", palette = "OrRd", direction = 1, name= "Heat Vulnerability Index") +
geom_sf(data = sf.tree, size=0.005, color = "lightgreen")
heattree_map
heattree_map <- ggplot () +
theme_void() +
geom_sf(data = sf.heat, aes(fill = HVI_SCORE), colour = "black", size=0.1) +
scale_fill_distiller(type = "seq", palette = "OrRd", direction = 1, name= "Heat Vulnerability Index") +
geom_sf(data = sf.tree, size=0.0000005, color = "lightgreen")
heattree_map
heattree_map <- ggplot () +
theme_void() +
geom_sf(data = sf.heat, aes(fill = HVI_SCORE), colour = "black", size=0.1) +
scale_fill_distiller(type = "seq", palette = "OrRd", direction = 1, name= "Heat Vulnerability Index") +
geom_sf(data = sf.tree, size=0.005, color = "lightgreen")
heattree_map
#Append a census tract to each tree
df.trees <- st_join(sf.tree, sf.heat, join = st_within) #Find intersections
View(df.trees)
url <-'https://opendata.arcgis.com/api/v3/datasets/20332a074f0446b3b3190ba9d68b863e_0/downloads/data?format=shp&spatialRefId=4326'
#download zipfile and unzip
temp = tempfile()
temp2 = tempfile()
download.file(url, temp, mode='wb')
unzip(zipfile=temp, exdir=temp2)
# Read the shapefiles
sf.census <- read_sf(temp2)
#Clean up a little for clarity
sf.census <- sf.census %>%
rename('Tract_ID' = 'GEOGRAPHY_',
'Count_total' = 'COUNT_ALL_',
'Count_white' = 'COUNT_WHIT',
'Count_black' = 'COUNT_BLAC',
'Count_asian' = 'COUNT_ASIA',
'Area' = 'Shape__Are')%>% #rename variables
select(Tract_ID, Count_total, Count_white, Count_black, Count_asian, Area, geometry) %>%
mutate("PopnDensity" = Count_total/Area)
#Append a census tract to each tree
df.census <- st_join(sf.tree, sf.census, join = st_within) #Find intersections
View(df.census)
View(df.trees)
#Append a census tract to each tree
df.trees <- st_join(sf.tree, sf.heat, join = st_within) #Find intersections
#count number of trees per census tract and append to heat data
sf.heat <- left_join(sf.heat,
plyr::count(df.trees$GEOID10)%>%
rename("GEOID10" = 'x', "TreeNumber"='freq'))%>%
mutate(TreeNumber = ifelse(is.na(TreeNumber), 0, TreeNumber)
#Append a census tract to each tree
df.trees <- st_join(sf.tree, sf.heat, join = st_within) #Find intersections
#count number of trees per census tract and append to heat data
sf.heat <- left_join(sf.heat,
plyr::count(df.trees$GEOID10)%>%
rename("GEOID10" = 'x', "TreeNumber"='freq'))%>%
mutate(TreeNumber = ifelse(is.na(TreeNumber), 0, TreeNumber))
tree_map <- ggplot() +
theme_void() +
geom_sf(data = sf.heat, aes(fill=TreeNumber), colour = "gray", size = 0.1) +
ggtitle("Tract polygons colored by number of trees")+
scale_fill_continuous(low = "white", high = "seagreen4", name= "Number of Trees")
tree_map
#Append a census tract to each tree
df.trees <- st_join(sf.tree, sf.heat, join = st_within) #Find intersections
#count number of trees per census tract and append to heat data
sf.heat <- left_join(sf.heat,
plyr::count(df.trees$GEOID10)%>%
rename("GEOID10" = 'x', "TreeNumber"='freq'))%>%
mutate(TreeNumber = ifelse(is.na(TreeNumber), 0, TreeNumber))
tree_map <- ggplot() +
theme_void() +
geom_sf(data = sf.heat, aes(fill=TreeNumber), colour = "gray", size = 0.1) +
ggtitle("Tract polygons colored by number of trees")+
scale_fill_continuous(low = "white", high = "lightgreen", name= "Number of Trees")
tree_map
max_tree_col <- quantile(sf.heat$TreeNumber, .98, na.rm = T)
min_tree_col <- quantile(sf.heat$TreeNumber, 0, na.rm = T)
max_tree_col <- quantile(sf.heat$TreeNumber, .98, na.rm = T)
min_tree_col <- quantile(sf.heat$TreeNumber, 0, na.rm = T)
tree_map2 <- ggplot() +
theme_void() +
geom_sf(data = sf.heat, aes(fill=TreeNumber), colour = "gray", size = 0.1) +
ggtitle("Tract polygons colored by number of trees")+
scale_fill_continuous(low = "white", high = "lightgreen", name = "Number of Trees", limits = c(min_crime_col, max_crime_col))
tree_map2 <- ggplot() +
theme_void() +
geom_sf(data = sf.heat, aes(fill=TreeNumber), colour = "gray", size = 0.1) +
ggtitle("Tract polygons colored by number of trees")+
scale_fill_continuous(low = "white", high = "lightgreen", name = "Number of Trees", limits = c(min_tree_col, max_tree_col))
tree_map2
par(mfrow=c(1,2))
heat_map
tree_map2
heat_map <- ggplot () +
theme_void() +
geom_sf(data = sf.heat, aes(fill = HVI_SCORE), colour = "black", size=0.1) +
ggtitle("Tract polygons colored by heat vulnerability index (HVI)")
scale_fill_distiller(type = "seq", palette = "OrRd", direction = 1, name= "Heat Vulnerability Index")
heat_map
heat_map <- ggplot () +
theme_void() +
geom_sf(data = sf.heat, aes(fill = HVI_SCORE), colour = "black", size=0.1) +
ggtitle("Tract polygons colored by heat vulnerability index (HVI)") +
scale_fill_distiller(type = "seq", palette = "OrRd", direction = 1, name= "Heat Vulnerability Index")
heat_map
#Append a census tract to each tree
df.trees <- st_join(sf.tree, sf.heat, join = st_within) #Find intersections
#Count number of trees per census tract and append to heat data
sf.heat <- left_join(sf.heat,
plyr::count(df.trees$GEOID10)%>%
rename("GEOID10" = 'x', "TreeNumber"='freq'))%>%
mutate(TreeNumber = ifelse(is.na(TreeNumber), 0, TreeNumber))
tree_map <- ggplot() +
theme_void() +
geom_sf(data = sf.heat, aes(fill=TreeNumber), colour = "gray", size = 0.1) +
ggtitle("Tract polygons colored by number of trees")+
scale_fill_continuous(low = "white", high = "lightgreen", name = "Number of Trees")
tree_map
#It looks like the presence of a large park in our map area has messed with our scaling. Let's set custom limits.
max_tree_col <- quantile(sf.heat$TreeNumber, .98, na.rm = T)
min_tree_col <- quantile(sf.heat$TreeNumber, 0, na.rm = T)
tree_map2 <- ggplot() +
theme_void() +
geom_sf(data = sf.heat, aes(fill=TreeNumber), colour = "gray", size = 0.1) +
ggtitle("Tract polygons colored by number of trees") +
scale_fill_continuous(low = "white", high = "lightgreen", name = "Number of Trees", limits = c(min_tree_col, max_tree_col))
tree_map2
par(mfrow=c(1,2))
heat_map
tree_map2
summary(lm(TreeNumber ~ HVI_SCORE, data=sf.heat))
summary(lm(HVI_SCORE ~ TreeNumber, data=sf.heat))
knitr::opts_chunk$set(echo = TRUE)
#clear environment
rm(list = ls())
# install.packages("tlocoh", dependencies=T, repos=c("http://R-Forge.R-project.org" ,
# "http://cran.cnr.berkeley.edu"))
library(tlocoh)
#clear environment
rm(list = ls())
install.packages("tlocoh", dependencies=T, repos=c("http://R-Forge.R-project.org" ,
"http://cran.cnr.berkeley.edu"))
library(tlocoh)
library(sp)
library(rgdal)
library(rgeos)
library(sf)
library(ggmap)
library(dplyr)
#get some data
data(toni) #attach data
sf.toni <- st_as_sf(toni, coords = c("long","lat"))
head(sf.toni)
sf.toni$date <-as.Date(as.POSIXct(sf.toni$timestamp.utc, tz="UTC")) #convert times to POSIX
bbox = c(left=min(toni$long - 0.05),right=max(toni$long) + 0.05, #longitude
top=max(toni$lat) + 0.05,bottom=min(toni$lat) -0.05)
basemap <- ggmap(get_stamenmap(maptype='terrain',
bbox=bbox,
zoom=12))
basemap+
theme_void()+
geom_sf(data=sf.toni, aes(color=date), inherit.aes = FALSE)
library(ks)
coords <- st_coordinates(sf.toni)
H.scv <- Hscv(x=coords) #Smoothed cross-validation (SCV) bandwidth selector
NumGridLines =10
min.x <- bbox[["left"]]
min.y <- bbox[["bottom"]]
max.x <- bbox[["right"]]
max.y <- bbox[["top"]]
fhat <- ks::kde(x=coords, H=H.scv, gridsize=NumGridLines, binned=TRUE,
xmin=c(min.x, min.y),
xmax=c(max.x, max.y))
Fx_ExtractContour <-  function(fhat, ContourLine){
#Get a few other contours
contour.x <- with(fhat,contourLines(x=eval.points[[1]],y=eval.points[[2]],
z=estimate,levels=cont[ContourLine])[[1]])
poly.x <- with(contour.x, data.frame(x,y))
poly.x <- rbind(poly.x,poly.x[1,])    # close polygon
poly.x <- as.data.frame(poly.x) %>%
mutate(contour = ContourLine) %>%
sfheaders::sf_polygon(x="x", y="y", polygon_id="contour")
return(poly.x)
}
contours <- rbind(
Fx_ExtractContour(fhat, "99%"),
Fx_ExtractContour(fhat, "95%"),
Fx_ExtractContour(fhat, "75%"),
Fx_ExtractContour(fhat, "50%"),
Fx_ExtractContour(fhat, '10%')
)
Pal <- c("99%"="red4","95%"="red2", "75%"="orange3", "50%"="goldenrod3", "10%"="lightgoldenrod3")
basemap +
geom_sf(data=contours, aes(fill=contour), inherit.aes = FALSE, alpha = 0.6, color=NA)+
scale_fill_manual(values = Pal, name= "Contour density") +
geom_sf(data=sf.toni, inherit.aes = FALSE, size =0.01)
#convert to sp object, set projection and timezones
toni.sp.latlong <- SpatialPoints(toni[ , c("long","lat")], proj4string=CRS("+proj=longlat +ellps=WGS84")) #sp object
toni.sp.utm <- spTransform(toni.sp.latlong, CRS("+proj=utm +south +zone=36
+ellps=WGS84")) #convert to utm
toni.mat.utm <- coordinates(toni.sp.utm) #extract coords
colnames(toni.mat.utm) <- c("x","y")
toni.gmt <- as.POSIXct(toni$timestamp.utc, tz="UTC") #convert times to POSIX
local.tz <- "Africa/Johannesburg" #specify timezon
toni.localtime <- as.POSIXct(format(toni.gmt, tz=local.tz), tz=local.tz)
#convert to locoh object
toni.lxy <- xyt.lxy(xy=toni.mat.utm, dt=toni.localtime, id="toni",
proj4string=CRS("+proj=utm +south +zone=36 +ellps=WGS84"))
toni.lxy <- lxy.nn.add(toni.lxy, s=0.003, k=25) #find nearest neighbors
toni.lhs <- lxy.lhs(toni.lxy, k=15, s=0.003) #create hulls
toni.lhs <- lhs.iso.add(toni.lhs) #add iso layers
toni.lhs.k15 <- lhs.select(toni.lhs, k=15) #select the k=15 for analysis
toni.lhs.k15 <- lhs.ellipses.add(toni.lhs.k15) #add ellipses
toni.lhs.k15 <- lhs.iso.add(toni.lhs.k15, sort.metric="ecc") #calculate eccentricity
toni.lhs.k15 <- lhs.visit.add(toni.lhs.k15, ivg=3600*12) #cycle period
plot(toni.lhs.k15, hulls=T, ellipses=T, allpts=T, nn=T, ptid="auto")
plot(toni.lhs, iso=T, k=15, allpts=T, cex.allpts=0.1, col.allpts="gray30",
ufipt=F); plot(toni.lhs, iso=T, k=15, ufipt=F)
plot(toni.lhs.k15, iso=T, iso.sort.metric="ecc")
#hist(toni.lhs.k15, metric="nsv")
plot(toni.lhs.k15, hpp=T, hpp.classify="nsv", ivg=3600*12, col.ramp="rainbow")
plot(toni.lhs.k15, hpp=T, hpp.classify="mnlv", col.ramp="rainbow")
hsp <- lhs.plot.scatter(toni.lhs.k15, x="nsv", y="mnlv", col="spiral",
bg="black"); plot(toni.lhs.k15, hpp=T, hsp=hsp, hpp.classify="hsp")
data()
data(seals)
force(seals)
knitr::opts_chunk$set(echo = TRUE)
seals <- data(seals)
data(seals)
head(seals)
View(seals)
sf.toni <- st_as_sf(toni, coords = c("long","lat"))
sf.seals <- st_as_sf(toni, coords = c("long","lat"))
View(sf.seals)
View(seals)
sf.seals <- st_as_sf(seal, coords = c("long","lat"))
sf.seals <- st_as_sf(seals, coords = c("long","lat"))
View(sf.seals)
View(toni)
View(seals)
View(sf.seals)
View(sf.toni)
file_list <- list.files("C:\Users\nighki01\Downloads\archive (2)\Geolife Trajectories 1.3\Data\000\Trajectory", full=T)
file_list <- list.files("C:/Users/nighki01/Downloads/archive (2)Geolife Trajectories 1.3/Data/000/Trajectory", full=T)
file_con <- lapply(file_list, function(x){
return(read.table(x, head=F, quote = "\"", skip = 6, sep = ","))
})
file_con_df <- do.call(rbind, file_con)
file_list <- list.files("C:/Users/nighki01/Downloads/archive (2)Geolife Trajectories 1.3/Data/000/Trajectory", full=T)
file_con <- lapply(file_list, function(x){
return(read.table(x, head=F, quote = "\"", skip = 6, sep = ","))
})
file_con_df <- do.call(rbind, file_con)
file_list <- list.files("C:/Users/nighki01/Downloads/archive (2)Geolife Trajectories 1.3/Data/000/Trajectory", full=T)
file_list <- list.files("C:\Users\nighki01\Downloads\archive (2)Geolife Trajectories 1.3\Data\000\Trajectory", full=T)
/
file_list <- list.files("C:/Users/nighki01/Downloads/archive (2)Geolife Trajectories 1.3/Data/000/Trajectory", full=T)
file_list <- list.files("C:/Users/nighki01/Downloads/archive (2)Geolife Trajectories 1.3/Data/001/Trajectory", full=T)
file_list <- list.files("C:/Users/nighki01/Downloads/archive (2)Geolife Trajectories 1.3/Data/001/Trajectory")
data <- read.table("C:/Users/nighki01/Downloads/archive (2)Geolife Trajectories 1.3/Data/001/Trajectory/20081023025304.plt", header = FALSE, quote = "\"", skip = 6, sep = ",")
data <- read.table("C:/Users/nighki01/Downloads/archive (2)Geolife Trajectories 1.3/Data/001/Trajectory/20081023025304.plt", header = FALSE, quote = "\"", skip = 6, sep = ",")
pacman::p_load(tlocoh, sp, rgdal, rgeos, sf, ggmap, dplyr. readxl)
pacman::p_load(tlocoh, sp, rgdal, rgeos, sf, ggmap, dplyr, readxl)
if(!require('pacman')) {
install.packages('pacman')
}
pacman::p_load(tlocoh, sp, rgdal, rgeos, sf, ggmap, dplyr)
bird <- read.csv("/bird_migration.csv", header = T)
bird <- read.csv("\bird_migration.csv", header = T)
getwd
getwd()
bird <- read.csv("bird_migration.csv", header = T)
View(bird)
bird <- bird %>%
select(bird_name, date_time, latitude, longitude)
View(bird)
sf.bird <- st_as_sf(bird, coords = c("longitude","latitude"))
#Convert to date-time
sf.bird$date <-as.Date(as.POSIXct(sf.bird$date_time, tz="GMT"))
UTC
#Convert to date-time
sf.bird$date <-as.Date(as.POSIXct(sf.bird$date_time, tz="GMT"))
bbox = c(left=min(bird$longitude - 0.05),right=max(bird$longitude) + 0.05, #longitude
top=max(bird$latitude) + 0.05,bottom=min(bird$latitude) -0.05) #latitude
basemap <- ggmap(get_stamenmap(maptype='terrain',
bbox=bbox,
zoom=12))
View(bird)
bbox
View(bird)
bird %>% filter(bird_name == "Eric") %>% max(longitude)
bird %>% filter(bird_name == "Eric") %>% max(latitude)
bird %>% filter(bird_name == "Eric")
bird %>% filter(bird_name == "Eric") %>% max(longitude)
bird %>% filter(bird_name == "Eric") %>% max(bird$longitude)
bird <- bird %>%
select(bird_name, date_time, latitude, longitude) %>%
filter(latitude > 30)
sf.bird <- st_as_sf(bird, coords = c("longitude","latitude"))
#Convert date to POSIX
sf.bird$date <-as.Date(as.POSIXct(sf.bird$date_time, tz="GMT"))
bbox = c(left=min(bird$longitude - 0.05),right=max(bird$longitude) + 0.05, #longitude
top=max(bird$latitude) + 0.05,bottom=min(bird$latitude) -0.05) #latitude
basemap <- ggmap(get_stamenmap(maptype='terrain',
bbox=bbox,
zoom=8))
bbox
bird <- read.csv("bird_migration.csv", header = T)
#Remove unnecessary variables
bird <- bird %>%
select(bird_name, date_time, latitude, longitude) %>%
filter(latitude > 30) %>%
filter(longitude < -7 )
#Make shape file
sf.bird <- st_as_sf(bird, coords = c("longitude","latitude"))
#Convert date to POSIX
sf.bird$date <-as.Date(as.POSIXct(sf.bird$date_time, tz="GMT"))
#Setting bounds for base map
bbox = c(left=min(bird$longitude - 0.05),right=max(bird$longitude) + 0.05, #longitude
top=max(bird$latitude) + 0.05,bottom=min(bird$latitude) -0.05) #latitude
#Getting base map
basemap <- ggmap(get_stamenmap(maptype='terrain',
bbox=bbox,
zoom=8))
#Setting bounds for base map
bbox = c(left=min(bird$longitude - 0.05),right=max(bird$longitude) + 0.05, #longitude
top=max(bird$latitude) + 0.05,bottom=min(bird$latitude) -0.05) #latitude
#Getting base map
basemap <- ggmap(get_stamenmap(maptype='terrain',
bbox=bbox,
zoom=5))
basemap
basemap <- ggmap(get_stamenmap(maptype='terrain',
bbox=bbox,
zoom=8))
basemap
basemap+
theme_void()+
geom_sf(data=sf.bird, aes(color=bird_name), inherit.aes = FALSE)
bird <- read.csv("bird_migration.csv", header = T)
#Remove unnecessary variables
bird <- bird %>%
select(bird_name, date_time, latitude, longitude) %>%
filter(latitude > 35) %>%
filter(longitude < -6 )
#Make shape file
sf.bird <- st_as_sf(bird, coords = c("longitude","latitude"))
#Convert date to POSIX
sf.bird$date <-as.Date(as.POSIXct(sf.bird$date_time, tz="GMT"))
#Setting bounds for base map
bbox = c(left=min(bird$longitude - 0.05),right=max(bird$longitude) + 0.05, #longitude
top=max(bird$latitude) + 0.05,bottom=min(bird$latitude) -0.05) #latitude
#Getting base map
basemap <- ggmap(get_stamenmap(maptype='terrain',
bbox=bbox,
zoom=8))
basemap+
theme_void()+
geom_sf(data=sf.bird, aes(color=bird_name), inherit.aes = FALSE)
bird <- bird %>%
select(bird_name, date_time, latitude, longitude) %>%
filter(latitude > 35) #%>%
#filter(longitude < -6 )
#Make shape file
sf.bird <- st_as_sf(bird, coords = c("longitude","latitude"))
#Convert date to POSIX
sf.bird$date <-as.Date(as.POSIXct(sf.bird$date_time, tz="GMT"))
#Setting bounds for base map
bbox = c(left=min(bird$longitude - 0.05),right=max(bird$longitude) + 0.05, #longitude
top=max(bird$latitude) + 0.05,bottom=min(bird$latitude) -0.05) #latitude
#Getting base map
basemap <- ggmap(get_stamenmap(maptype='terrain',
bbox=bbox,
zoom=8))
basemap+
theme_void()+
geom_sf(data=sf.bird, aes(color=bird_name), inherit.aes = FALSE)
bird <- read.csv("bird_migration.csv", header = T)
bird <- read.csv("bird_migration.csv", header = T)
#Remove unnecessary variables
bird <- bird %>%
select(bird_name, date_time, latitude, longitude) %>%
filter(latitude > 35) #%>%
#filter(longitude < -6 )
#Make shape file
sf.bird <- st_as_sf(bird, coords = c("longitude","latitude"))
#Convert date to POSIX
sf.bird$date <-as.Date(as.POSIXct(sf.bird$date_time, tz="GMT"))
#Setting bounds for base map
bbox = c(left=min(bird$longitude - 0.05),right=max(bird$longitude) + 0.05, #longitude
top=max(bird$latitude) + 0.05,bottom=min(bird$latitude) -0.05) #latitude
#Getting base map
basemap <- ggmap(get_stamenmap(maptype='terrain',
bbox=bbox,
zoom=8))
basemap+
theme_void()+
geom_sf(data=sf.bird, aes(color=bird_name), inherit.aes = FALSE)
bird <- read.csv("bird_migration.csv", header = T)
#Remove unnecessary variables
bird <- bird %>%
select(bird_name, date_time, latitude, longitude)
sf.bird <- st_as_sf(bird, coords = c("longitude","latitude"))
#Convert date to POSIX
sf.bird$date <-as.Date(as.POSIXct(sf.bird$date_time, tz="GMT"))
#Setting bounds for base map
bbox = c(left=min(bird$longitude - 0.05),right=max(bird$longitude) + 0.05, #longitude
top=max(bird$latitude) + 0.05,bottom=min(bird$latitude) -0.05) #latitude
#Getting base map
basemap <- ggmap(get_stamenmap(maptype='terrain',
bbox=bbox,
zoom=8))
basemap+
theme_void()+
geom_sf(data=sf.bird, aes(color=bird_name), inherit.aes = FALSE)
bird <- read.csv("bird_migration.csv", header = T)
#Remove unnecessary variables
bird <- bird %>%
select(bird_name, date_time, latitude, longitude) %>%
filter(latitude > 35) #%>%
#filter(longitude < -6 )
#Make shape file
sf.bird <- st_as_sf(bird, coords = c("longitude","latitude"))
#Convert date to POSIX
sf.bird$date <-as.Date(as.POSIXct(sf.bird$date_time, tz="GMT"))
#Setting bounds for base map
bbox = c(left=min(bird$longitude - 0.05),right=max(bird$longitude) + 0.05, #longitude
top=max(bird$latitude) + 0.05,bottom=min(bird$latitude) -0.05) #latitude
#Getting base map
basemap <- ggmap(get_stamenmap(maptype='terrain',
bbox=bbox,
zoom=8))
basemap+
theme_void()+
geom_sf(data=sf.bird, aes(color=bird_name), inherit.aes = FALSE)
bird <- read.csv("bird_migration.csv", header = T)
#Remove unnecessary variables
bird <- bird %>%
select(bird_name, date_time, latitude, longitude) %>%
filter(latitude > 50) %>%
filter(longitude > -0.5)
#Make shape file
sf.bird <- st_as_sf(bird, coords = c("longitude","latitude"))
#Convert date to POSIX
sf.bird$date <-as.Date(as.POSIXct(sf.bird$date_time, tz="GMT"))
#Setting bounds for base map
bbox = c(left=min(bird$longitude - 0.05),right=max(bird$longitude) + 0.05, #longitude
top=max(bird$latitude) + 0.05,bottom=min(bird$latitude) -0.05) #latitude
#Getting base map
basemap <- ggmap(get_stamenmap(maptype='terrain',
bbox=bbox,
zoom=8))
basemap+
theme_void()+
geom_sf(data=sf.bird, aes(color=bird_name), inherit.aes = FALSE)
bird <- read.csv("bird_migration.csv", header = T)
#Remove unnecessary variables
bird <- bird %>%
select(bird_name, date_time, latitude, longitude) %>%
filter(latitude > 49) %>%
filter(longitude > -0.5)
#Make shape file
sf.bird <- st_as_sf(bird, coords = c("longitude","latitude"))
#Convert date to POSIX
sf.bird$date <-as.Date(as.POSIXct(sf.bird$date_time, tz="GMT"))
#Setting bounds for base map
bbox = c(left=min(bird$longitude - 0.05),right=max(bird$longitude) + 0.05, #longitude
top=max(bird$latitude) + 0.05,bottom=min(bird$latitude) -0.05) #latitude
#Getting base map
basemap <- ggmap(get_stamenmap(maptype='terrain',
bbox=bbox,
zoom=8))
basemap+
theme_void()+
geom_sf(data=sf.bird, aes(color=bird_name), inherit.aes = FALSE)
#Setting bounds for base map
bbox = c(left=min(bird$longitude - 0.05),right=max(bird$longitude) + 0.05, #longitude
top=max(bird$latitude) + 0.05,bottom=min(bird$latitude) -0.05) #latitude
#Getting base map
basemap <- ggmap(get_stamenmap(maptype='terrain',
bbox=bbox,
zoom=12))
#Setting bounds for base map
bbox = c(left=min(bird$longitude - 0.05),right=max(bird$longitude) + 0.05, #longitude
top=max(bird$latitude) + 0.05,bottom=min(bird$latitude) -0.05) #latitude
#Getting base map
basemap <- ggmap(get_stamenmap(maptype='terrain',
bbox=bbox,
zoom=10))
basemap+
theme_void()+
geom_sf(data=sf.bird, aes(color=bird_name), inherit.aes = FALSE)
